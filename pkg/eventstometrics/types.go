// Code generated by tutone: DO NOT EDIT
package eventstometrics

// EventsToMetricsErrorReason - General error categories.
type EventsToMetricsErrorReason string

var EventsToMetricsErrorReasonTypes = struct {
	// Other errors.
	GENERAL EventsToMetricsErrorReason
	// Indicates some part of your submission was invalid.
	INVALID_INPUT EventsToMetricsErrorReason
	// The user attempting to submit this rule is not authorized to do so.
	USER_NOT_AUTHORIZED EventsToMetricsErrorReason
}{
	// Other errors.
	GENERAL: "GENERAL",
	// Indicates some part of your submission was invalid.
	INVALID_INPUT: "INVALID_INPUT",
	// The user attempting to submit this rule is not authorized to do so.
	USER_NOT_AUTHORIZED: "USER_NOT_AUTHORIZED",
}

// EventsToMetricsAccountStitchedFields - Account stitched fields to enable autostitching in NerdGraph
type EventsToMetricsAccountStitchedFields struct {
	AllRules  EventsToMetricsListRuleResult `json:"allRules"`
	RulesById EventsToMetricsListRuleResult `json:"rulesById"`
}

// EventsToMetricsCreateRuleFailure - Error details about the events to metrics rule that failed to be created and why.
type EventsToMetricsCreateRuleFailure struct {
	Errors    []EventsToMetricsError              `json:"errors"`
	Submitted EventsToMetricsCreateRuleSubmission `json:"submitted"`
}

// EventsToMetricsCreateRuleInput - Details needed to create an events to metrics conversion rule.
type EventsToMetricsCreateRuleInput struct {
	AccountID   int    `json:"accountId"`
	Description string `json:"description"`
	Name        string `json:"name"`
	Nrql        string `json:"nrql"`
}

// EventsToMetricsCreateRuleResult - The result of which submitted events to metrics rules were successfully and unsuccessfully created
type EventsToMetricsCreateRuleResult struct {
	Failures  []EventsToMetricsCreateRuleFailure `json:"failures"`
	Successes []EventsToMetricsRule              `json:"successes"`
}

// EventsToMetricsCreateRuleSubmission - The details that were submitted when creating an events to metrics conversion rule.
type EventsToMetricsCreateRuleSubmission struct {
	AccountID   int    `json:"accountId"`
	Description string `json:"description"`
	Name        string `json:"name"`
	Nrql        string `json:"nrql"`
}

// EventsToMetricsDeleteRuleFailure - Error details about the events to metrics rule that failed to be deleted and why.
type EventsToMetricsDeleteRuleFailure struct {
	Errors    []EventsToMetricsError              `json:"errors"`
	Submitted EventsToMetricsDeleteRuleSubmission `json:"submitted"`
}

// EventsToMetricsDeleteRuleInput - Identifying information about the events to metrics rule you want to delete.
type EventsToMetricsDeleteRuleInput struct {
	AccountID int    `json:"accountId"`
	RuleId    string `json:"ruleId"`
}

// EventsToMetricsDeleteRuleResult - The result of which submitted events to metrics rules were successfully and unsuccessfully deleted.
type EventsToMetricsDeleteRuleResult struct {
	Failures  []EventsToMetricsDeleteRuleFailure `json:"failures"`
	Successes []EventsToMetricsRule              `json:"successes"`
}

// EventsToMetricsDeleteRuleSubmission - The details that were submitted when deleteing an events to metrics conversion rule.
type EventsToMetricsDeleteRuleSubmission struct {
	AccountID int    `json:"accountId"`
	RuleId    string `json:"ruleId"`
}

// EventsToMetricsError - Error details when processing events to metrics rule requests.
type EventsToMetricsError struct {
	Description string                     `json:"description"`
	Reason      EventsToMetricsErrorReason `json:"reason"`
}

// EventsToMetricsListRuleResult - A list of rule details to be returned.
type EventsToMetricsListRuleResult struct {
	Rules []EventsToMetricsRule `json:"rules"`
}

// EventsToMetricsRule - Information about an event-to-metric rule which creates metrics from events.
type EventsToMetricsRule struct {
	AccountID   int      `json:"accountId"`
	CreatedAt   DateTime `json:"createdAt"`
	Description string   `json:"description"`
	Enabled     bool     `json:"enabled"`
	ID          string   `json:"id"`
	Name        string   `json:"name"`
	Nrql        string   `json:"nrql"`
	UpdatedAt   DateTime `json:"updatedAt"`
}

// EventsToMetricsUpdateRuleFailure - Error details about the events to metrics rule that failed to be updated and why.
type EventsToMetricsUpdateRuleFailure struct {
	Errors    []EventsToMetricsError              `json:"errors"`
	Submitted EventsToMetricsUpdateRuleSubmission `json:"submitted"`
}

// EventsToMetricsUpdateRuleInput - Identifying information about the events to metrics rule you want to update.
type EventsToMetricsUpdateRuleInput struct {
	AccountID int    `json:"accountId"`
	Enabled   bool   `json:"enabled"`
	RuleId    string `json:"ruleId"`
}

// EventsToMetricsUpdateRuleResult - The result of which submitted events to metrics rules were successfully and unsuccessfully update.
type EventsToMetricsUpdateRuleResult struct {
	Failures  []EventsToMetricsUpdateRuleFailure `json:"failures"`
	Successes []EventsToMetricsRule              `json:"successes"`
}

// EventsToMetricsUpdateRuleSubmission - The details that were submitted when updating an events to metrics conversion rule.
type EventsToMetricsUpdateRuleSubmission struct {
	AccountID int    `json:"accountId"`
	Enabled   bool   `json:"enabled"`
	RuleId    string `json:"ruleId"`
}

// DateTime - The `DateTime` scalar represents a date and time. The `DateTime` appears as an ISO8601 formatted string.
type DateTime string

// ID - The `ID` scalar type represents a unique identifier, often used to
// refetch an object or as key for a cache. The ID type appears in a JSON
// response as a String; however, it is not intended to be human-readable.
// When expected as an input type, any string (such as `"4"`) or integer
// (such as `4`) input value will be accepted as an ID.
type ID string
