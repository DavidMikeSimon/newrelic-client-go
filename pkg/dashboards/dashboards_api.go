// Code generated by tutone: DO NOT EDIT
package dashboards

import (
	"github.com/newrelic/newrelic-client-go/pkg/entities"
)

// Create a `DashboardEntity`
func (a *Dashboards) DashboardCreate(
	accountID int,
	dashboard DashboardInput,
) (*DashboardCreateResult, error) {

	resp := DashboardCreateResponse{}
	vars := map[string]interface{}{
		"accountId": accountID,
		"dashboard": dashboard,
	}

	if err := a.client.NerdGraphQuery(DashboardCreateMutation, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.DashboardCreateResult, nil
}

type DashboardCreateResponse struct {
	DashboardCreateResult DashboardCreateResult `json:"DashboardCreate"`
}

const DashboardCreateMutation = `mutation(
	$accountId: Int!,
	$dashboard: DashboardInput!,
) { dashboardCreate(
	accountId: $accountId,
	dashboard: $dashboard,
) {
	entityResult {
		accountId
		createdAt
		description
		guid
		name
		permissions
		updatedAt
	}
	errors {
		description
		type
	}
} }`

// Delete an existing `DashboardEntity`
func (a *Dashboards) DashboardDelete(
	gUID entities.EntityGUID,
) (*DashboardDeleteResult, error) {

	resp := DashboardDeleteResponse{}
	vars := map[string]interface{}{
		"guid": gUID,
	}

	if err := a.client.NerdGraphQuery(DashboardDeleteMutation, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.DashboardDeleteResult, nil
}

type DashboardDeleteResponse struct {
	DashboardDeleteResult DashboardDeleteResult `json:"DashboardDelete"`
}

const DashboardDeleteMutation = `mutation(
	$guid: EntityGuid!,
) { dashboardDelete(
	guid: $guid,
) {
	errors {
		description
		type
	}
	status
} }`

// ) Update an existing `DashboardEntity`
func (a *Dashboards) DashboardUpdate(
	dashboard DashboardInput,
	gUID entities.EntityGUID,
) (*DashboardUpdateResult, error) {

	resp := DashboardUpdateResponse{}
	vars := map[string]interface{}{
		"dashboard": dashboard,
		"guid":      gUID,
	}

	if err := a.client.NerdGraphQuery(DashboardUpdateMutation, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.DashboardUpdateResult, nil
}

type DashboardUpdateResponse struct {
	DashboardUpdateResult DashboardUpdateResult `json:"DashboardUpdate"`
}

const DashboardUpdateMutation = `mutation(
	$dashboard: DashboardInput!,
	$guid: EntityGuid!,
) { dashboardUpdate(
	dashboard: $dashboard,
	guid: $guid,
) {
	entityResult {
		accountId
		createdAt
		description
		guid
		name
		permissions
		updatedAt
	}
	errors {
		description
		type
	}
} }`
