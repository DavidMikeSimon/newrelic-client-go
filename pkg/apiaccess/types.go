// Code generated by tutone: DO NOT EDIT
package apiaccess

import (
	"github.com/newrelic/newrelic-client-go/internal/serialization"
)

// ApiAccessIngestKeyErrorType - The type of error.
type ApiAccessIngestKeyErrorType string

var ApiAccessIngestKeyErrorTypeTypes = struct {
	// Occurs when the user issuing the mutation does not have sufficient permissions to perform the action for a key.
	FORBIDDEN ApiAccessIngestKeyErrorType
	// Occurs when the action taken on a key did not successfully pass validation.
	INVALID ApiAccessIngestKeyErrorType
	// Occurs when the requested key `id` was not found.
	NOT_FOUND ApiAccessIngestKeyErrorType
}{
	// Occurs when the user issuing the mutation does not have sufficient permissions to perform the action for a key.
	FORBIDDEN: "FORBIDDEN",
	// Occurs when the action taken on a key did not successfully pass validation.
	INVALID: "INVALID",
	// Occurs when the requested key `id` was not found.
	NOT_FOUND: "NOT_FOUND",
}

// ApiAccessIngestKeyType - The type of ingest key, which dictates what types of agents can use it to report.
type ApiAccessIngestKeyType string

var ApiAccessIngestKeyTypeTypes = struct {
	// Ingest keys of type `BROWSER` mean browser agents will use them to report data to New Relic.
	BROWSER ApiAccessIngestKeyType
	// For ingest keys of type `LICENSE`: APM and Infrastructure agents use the key to report data to New Relic.
	LICENSE ApiAccessIngestKeyType
}{
	// Ingest keys of type `BROWSER` mean browser agents will use them to report data to New Relic.
	BROWSER: "BROWSER",
	// For ingest keys of type `LICENSE`: APM and Infrastructure agents use the key to report data to New Relic.
	LICENSE: "LICENSE",
}

// ApiAccessKeyType - The type of key.
type ApiAccessKeyType string

var ApiAccessKeyTypeTypes = struct {
	// An ingest key is used by New Relic agents to authenticate with New Relic and send data to the assigned account.
	INGEST ApiAccessKeyType
	// A user key is used by New Relic users to authenticate with New Relic and to interact with the New Relic GraphQL API .
	USER ApiAccessKeyType
}{
	// An ingest key is used by New Relic agents to authenticate with New Relic and send data to the assigned account.
	INGEST: "INGEST",
	// A user key is used by New Relic users to authenticate with New Relic and to interact with the New Relic GraphQL API .
	USER: "USER",
}

// ApiAccessUserKeyErrorType - The type of error.
type ApiAccessUserKeyErrorType string

var ApiAccessUserKeyErrorTypeTypes = struct {
	// Occurs when the user issuing the mutation does not have sufficient permissions to perform the action for a key.
	FORBIDDEN ApiAccessUserKeyErrorType
	// Occurs when the action taken on a key did not successfully pass validation.
	INVALID ApiAccessUserKeyErrorType
	// Occurs when the requested key `id` was not found.
	NOT_FOUND ApiAccessUserKeyErrorType
}{
	// Occurs when the user issuing the mutation does not have sufficient permissions to perform the action for a key.
	FORBIDDEN: "FORBIDDEN",
	// Occurs when the action taken on a key did not successfully pass validation.
	INVALID: "INVALID",
	// Occurs when the requested key `id` was not found.
	NOT_FOUND: "NOT_FOUND",
}

// ApiAccessCreateIngestKeyInput - The input for any ingest keys you want to create. Each ingest key must have a type that communicates what kind of data it is for. You can optionally add a name or notes to your key, which can be updated later.
type ApiAccessCreateIngestKeyInput struct {
	// The account ID indicating which account you want to make the key for. This cannot be updated once created.
	AccountID int `json:"accountId"`
	// The type of ingest key you want to create. This cannot be updated once created.
	IngestType ApiAccessIngestKeyType `json:"ingestType"`
	// The name of the key. This can be updated later.
	Name string `json:"name"`
	// Any notes about this ingest key. This can be updated later.
	Notes string `json:"notes"`
}

// ApiAccessCreateInput - The input object to create one or more keys.
type ApiAccessCreateInput struct {
	// Ingest keys are used by agents to report data about your applications to New Relic. Each ingest key input entered here must have a type that communicates what kind of data it is for. You can optionally add a name or notes to your key, which can be updated later.
	Ingest []ApiAccessCreateIngestKeyInput `json:"ingest"`
	// Create user keys. You can optionally add a name or notes to your key, which can be updated later.
	User []ApiAccessCreateUserKeyInput `json:"user"`
}

// ApiAccessCreateKeyResponse - The response of the create keys mutation.
type ApiAccessCreateKeyResponse struct {
	// Lists all successfully created keys.
	CreatedKeys []ApiAccessKey `json:"createdKeys"`
	// Lists all errors for keys that could not be created. Each error maps to a single key input.
	Errors []ApiAccessKeyError `json:"errors"`
}

// ApiAccessCreateUserKeyInput - The input for any ingest keys you want to create. Each ingest key must have a type that communicates what kind of data it is for. You can optionally add a name or notes to your key, which can be updated later.
type ApiAccessCreateUserKeyInput struct {
	// The account ID indicating which account you want to make the key for. This cannot be updated once created.
	AccountID int `json:"accountId"`
	// The name of the key. This can be updated later.
	Name string `json:"name"`
	// Any notes about this ingest key. This can be updated later.
	Notes string `json:"notes"`
	// The user ID indicating which user you want to make the key for. This cannot be updated once created.
	UserId int `json:"userId"`
}

// ApiAccessDeleteInput - The input to delete keys.
type ApiAccessDeleteInput struct {
	// A list of the ingest key `id`s that you want to delete.
	IngestKeyIds []string `json:"ingestKeyIds"`
	// A list of the user key `id`s that you want to delete.
	UserKeyIds []string `json:"userKeyIds"`
}

// ApiAccessDeleteKeyResponse - The response of the key delete mutation.
type ApiAccessDeleteKeyResponse struct {
	// The `id`s of the successfully deleted ingest keys and any errors that occurred when deleting keys.
	DeletedKeys []ApiAccessDeletedKey `json:"deletedKeys"`
	// Lists all errors for keys that could not be deleted. Each error maps to a single key input.
	Errors []ApiAccessKeyError `json:"errors"`
}

// ApiAccessDeletedKey - The deleted key response of the key delete mutation.
type ApiAccessDeletedKey struct {
	// The `id` of the deleted key.
	ID string `json:"id"`
}

// ApiAccessKeyError - A key error. Each error maps to a single key input.
type ApiAccessKeyErrorType struct {
	// A message about why the key creation failed.
	Message string `json:"message"`
	// The type of the key.
	Type ApiAccessKeyType `json:"type"`
}

func (x *ApiAccessKeyErrorType) ImplementsApiAccessKeyError() {}

// ApiAccessKey - A key for accessing New Relic APIs.
type ApiAccessKeyType struct {
	// The ID of the key. This can be used to identify a key without revealing the key itself (used to update and delete).
	ID int `json:"id"`
	// The keystring of the key.
	Key string `json:"key"`
	// The name of the key. This can be used a short identifier for easy reference.
	Name string `json:"name"`
	// Any notes can be attached to a key. This is intended for more a more detailed description of the key use if desired.
	Notes string `json:"notes"`
	// The type of key, indicating what New Relic APIs it can be used to access.
	Type ApiAccessKeyType `json:"type"`
}

func (x *ApiAccessKeyType) ImplementsApiAccessKey() {}

// ApiAccessKey - A key for accessing New Relic APIs.
type ApiAccessKey interface {
	ImplementsApiAccessKey()
}

// ApiAccessKeyError - A key error. Each error maps to a single key input.
type ApiAccessKeyError interface {
	ImplementsApiAccessKeyError()
}
